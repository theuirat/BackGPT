/* Global Layout and Box Model Setting */

/*Box Sizing: The box-sizing: border-box; setting makes it easier to design UIs because it ensures that 
padding and borders are included within the element's dimensions. This means when you set a width and 
height in Figma, it translates more directly to CSS.

Container Class: The .container class is akin to setting constraints in Figma. It keeps your content 
centered and ensures it doesn't stretch too far on large screens, just like you might design in Figma.

Media Queries: These are like Figma's breakpoints for different device sizes. They allow you to tailor 
your design to different screen widths, similar to how you would design for different device frames in Figma.

Grid System: The .grid-container uses CSS Grid, a powerful layout system. It's similar to designing with grids 
in Figma, providing a structured way to layout elements in a responsive and flexible manner.*/


/* This ensures that padding and border are included in the total width and height of elements, 
   making layout calculations more straightforward and consistent. */
   *, 
   *::after, 
   *::before {
       box-sizing: border-box;
   }
   
   /* Body Styling */
   /* This resets the margin to 0 (removing browser defaults) and sets a default font stack. 
      'system-ui' leverages the default system font, providing a native look on different platforms. */
      body {  
        margin: 0;
        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    }
   
   
   /* Mobile Specific Styles */
   /* These styles are for a mobile first responsive design */
      .container {
        margin: 0 auto;
        padding: 0px; /* Padding for mobile */
      }

      .grid-container {
        display: grid;
        grid-template-columns: repeat(4, 1fr); /* 4 columns for mobile */
        grid-gap: 16px;
    }
    
    /* Tablet Specific Styles */
    @media (min-width: 768px) {
        .container {
            padding: 0px; /* Padding for tablet */
        }
        .grid-container {
            grid-template-columns: repeat(8, 1fr); /* 8 columns for tablet */
        }
    }
    
    /* Desktop Specific Styles */
    @media (min-width: 1025px) {
        /* Container: Used for wrapping and centering content on the page */
        .container {
            max-width: 1320px; /* Sets the maximum width of the container */
            margin: 0 auto; /* Centers the container horizontally */
            padding: 0 80px; /* Adds horizontal padding */
        }

        /* Grid Container: Defines a grid layout for sections that require a grid */
        .grid-container {
            display: grid;
            grid-template-columns: repeat(12, 1fr); /* Creates a 12-column grid */
            grid-gap: 16px; /* Sets the gap between grid items */
            /* Add any additional grid styling as needed */
        }

}